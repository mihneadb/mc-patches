# HG changeset patch
# User Irving Reid <irving@mozilla.com>
# Date 1373636016 14400
Bug 890555: handle case of non-Object argument to do_throw

diff --git a/testing/xpcshell/head.js b/testing/xpcshell/head.js
--- a/testing/xpcshell/head.js
+++ b/testing/xpcshell/head.js
@@ -472,26 +472,28 @@ function do_execute_soon(callback, aName
  *
  * @param error  A message string or an Error object.
  * @param stack  null or nsIStackFrame object or a string containing
  *               \n separated stack lines (as in Error().stack).
  */
 function do_throw(error, stack) {
   let filename = "";
   if (!stack) {
-    // Use duck typing rather than instanceof in case error came
-    // from another context
-    if ("filename" in error)
-      filename = error.fileName;
-    if ("stack" in error) {
-      // |error| is likely an exception object
-      stack = error.stack;
-    } else {
+    if (error && typeof error === "object") {
+      // Use duck typing rather than instanceof in case error came
+      // from another context
+      if ("fileName" in error)
+        filename = error.fileName;
+      if ("stack" in error) {
+        // |error| is likely an exception object
+        stack = error.stack;
+      }
+    }
+    if (!stack)
       stack = Components.stack.caller;
-    }
   }
 
   if (stack instanceof Components.interfaces.nsIStackFrame)
     filename = stack.filename;
 
   _dump("TEST-UNEXPECTED-FAIL | " + filename + " | " + error +
         " - See following stack:\n");
 
@@ -525,36 +527,49 @@ function do_throw_todo(text, stack) {
     _dump(frame + "\n");
     frame = frame.caller;
   }
 
   _do_quit();
   throw Components.results.NS_ERROR_ABORT;
 }
 
+function _exception_message(ex) {
+  let message = ex;
+  if (ex && typeof ex === "object") {
+    if (ex.message)
+      message = ex.message;
+    if (ex.fileName)
+      message = message + " at " + ex.fileName;
+    if (ex.lineno)
+      message = message + ":" + ex.lineno;
+    if (ex.stack)
+      message = message + ", see following stack:\n" + ex.stack;
+  }
+  return message + "\n";
+}
+
 function do_report_unexpected_exception(ex, text) {
   var caller_stack = Components.stack.caller;
   text = text ? text + " - " : "";
 
   _passed = false;
   _dump("TEST-UNEXPECTED-FAIL | " + caller_stack.filename + " | " + text +
-        "Unexpected exception " + ex + ", see following stack:\n" + ex.stack +
-        "\n");
+        "Unexpected exception " + _exception_message(ex));
 
   _do_quit();
   throw Components.results.NS_ERROR_ABORT;
 }
 
 function do_note_exception(ex, text) {
   var caller_stack = Components.stack.caller;
   text = text ? text + " - " : "";
 
   _dump("TEST-INFO | " + caller_stack.filename + " | " + text +
-        "Swallowed exception " + ex + ", see following stack:\n" + ex.stack +
-        "\n");
+        "Swallowed exception " + _exception_message(ex));
 }
 
 function _do_check_neq(left, right, stack, todo) {
   if (!stack)
     stack = Components.stack.caller;
 
   var text = _wrap_with_quotes_if_necessary(left) + " != " +
              _wrap_with_quotes_if_necessary(right);
