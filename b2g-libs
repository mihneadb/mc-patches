# HG changeset patch
# Parent e42374f83509299ab8232fe7a7ebe1b14471bcfc
# User Mihnea Dobrescu-Balaur <mihneadb@gmail.com>
Bug 912909 - Call setLD_LIBRARY_PATH in runtestsb2g

diff --git a/testing/xpcshell/remotexpcshelltests.py b/testing/xpcshell/remotexpcshelltests.py
--- a/testing/xpcshell/remotexpcshelltests.py
+++ b/testing/xpcshell/remotexpcshelltests.py
@@ -197,16 +197,18 @@ class XPCShellRemote(xpcshell.XPCShellTe
         self.remoteScriptsDir = self.remoteTestRoot
         self.remoteComponentsDir = remoteJoin(self.remoteTestRoot, "c")
         self.remoteModulesDir = remoteJoin(self.remoteTestRoot, "m")
         self.profileDir = remoteJoin(self.remoteTestRoot, "p")
         self.remoteDebugger = options.debugger
         self.remoteDebuggerArgs = options.debuggerArgs
         self.testingModulesDir = options.testingModulesDir
 
+        self.env = {}
+
         if self.options.objdir:
             self.xpcDir = os.path.join(self.options.objdir, "_tests/xpcshell")
         elif os.path.isdir(os.path.join(here, 'tests')):
             self.xpcDir = os.path.join(here, 'tests')
         else:
             print >> sys.stderr, "Couldn't find local xpcshell test directory"
             sys.exit(1)
 
@@ -232,18 +234,18 @@ class XPCShellRemote(xpcshell.XPCShellTe
             'remoteDebugger': self.remoteDebugger,
             'pathMapping': self.pathMapping,
             'profileDir': self.profileDir,
             'remoteTmpDir': self.remoteTmpDir,
         }
         if self.remoteAPK:
             self.mobileArgs['remoteAPK'] = self.remoteAPK
 
-    def setLD_LIBRARY_PATH(self, env):
-        env["LD_LIBRARY_PATH"]=self.remoteBinDir
+    def setLD_LIBRARY_PATH(self):
+        self.env["LD_LIBRARY_PATH"] = self.remoteBinDir
 
     def pushWrapper(self):
         # Rather than executing xpcshell directly, this wrapper script is
         # used. By setting environment variables and the cwd in the script,
         # the length of the per-test command line is shortened. This is
         # often important when using ADB, as there is a limit to the length
         # of the ADB command line.
         localWrapper = tempfile.mktemp()
@@ -258,19 +260,18 @@ class XPCShellRemote(xpcshell.XPCShellTe
         f.write("%s/xpcshell \"$@\"\n" % self.remoteBinDir)
         f.close()
         remoteWrapper = remoteJoin(self.remoteBinDir, "xpcw")
         self.device.pushFile(localWrapper, remoteWrapper)
         os.remove(localWrapper)
         self.device.chmodDir(self.remoteBinDir)
 
     def buildEnvironment(self):
-        self.env = {}
         self.buildCoreEnvironment()
-        self.setLD_LIBRARY_PATH(self.env)
+        self.setLD_LIBRARY_PATH()
         self.env["MOZ_LINKER_CACHE"] = self.remoteBinDir
         if self.options.localAPK and self.appRoot:
             self.env["GRE_HOME"] = self.appRoot
         self.env["XPCSHELL_TEST_PROFILE_DIR"] = self.profileDir
         self.env["TMPDIR"] = self.remoteTmpDir
         self.env["HOME"] = self.profileDir
         self.env["XPCSHELL_TEST_TEMP_DIR"] = self.remoteTmpDir
         if self.options.setup:
@@ -334,16 +335,17 @@ class XPCShellRemote(xpcshell.XPCShellTe
 
         if self.options.localAPK:
             remoteFile = remoteJoin(self.remoteBinDir, os.path.basename(self.options.localAPK))
             self.device.pushFile(self.options.localAPK, remoteFile)
 
         self.pushLibs()
 
     def pushLibs(self):
+        pushed_libs_count = 0
         if self.options.localAPK:
             try:
                 dir = tempfile.mkdtemp()
                 szip = os.path.join(self.localBin, '..', 'host', 'bin', 'szip')
                 if not os.path.exists(szip):
                     # Tinderbox builds must run szip from the test package
                     szip = os.path.join(self.localBin, 'host', 'szip')
                 if not os.path.exists(szip):
@@ -354,37 +356,42 @@ class XPCShellRemote(xpcshell.XPCShellTe
                     if info.filename.endswith(".so"):
                         print >> sys.stderr, "Pushing %s.." % info.filename
                         remoteFile = remoteJoin(self.remoteBinDir, os.path.basename(info.filename))
                         self.localAPKContents.extract(info, dir)
                         file = os.path.join(dir, info.filename)
                         if szip:
                             out = subprocess.check_output([szip, '-d', file], stderr=subprocess.STDOUT)
                         self.device.pushFile(os.path.join(dir, info.filename), remoteFile)
+                        pushed_libs_count += 1
             finally:
                 shutil.rmtree(dir)
-            return
+            return pushed_libs_count
 
         for file in os.listdir(self.localLib):
             if (file.endswith(".so")):
                 print >> sys.stderr, "Pushing %s.." % file
                 if 'libxul' in file:
                     print >> sys.stderr, "This is a big file, it could take a while."
                 remoteFile = remoteJoin(self.remoteBinDir, file)
                 self.device.pushFile(os.path.join(self.localLib, file), remoteFile)
+                pushed_libs_count += 1
 
         # Additional libraries may be found in a sub-directory such as "lib/armeabi-v7a"
         localArmLib = os.path.join(self.localLib, "lib")
         if os.path.exists(localArmLib):
             for root, dirs, files in os.walk(localArmLib):
                 for file in files:
                     if (file.endswith(".so")):
                         print >> sys.stderr, "Pushing %s.." % file
                         remoteFile = remoteJoin(self.remoteBinDir, file)
                         self.device.pushFile(os.path.join(root, file), remoteFile)
+                        pushed_libs_count += 1
+
+        return pushed_libs_count
 
     def setupModules(self):
         if self.testingModulesDir:
             self.device.pushDir(self.testingModulesDir, self.remoteModulesDir)
 
     def setupTestDir(self):
         print 'pushing %s' % self.xpcDir
         try:
diff --git a/testing/xpcshell/runtestsb2g.py b/testing/xpcshell/runtestsb2g.py
--- a/testing/xpcshell/runtestsb2g.py
+++ b/testing/xpcshell/runtestsb2g.py
@@ -14,39 +14,38 @@ from mozdevice import devicemanagerADB, 
 
 DEVICE_TEST_ROOT = '/data/local/tests'
 
 
 from marionette import Marionette
 
 class B2GXPCShellTestThread(RemoteXPCShellTestThread):
     # Overridden
-    def setLD_LIBRARY_PATH(self, env):
-        if self.options.use_device_libs:
-            env['LD_LIBRARY_PATH'] = '/system/b2g'
-            env['LD_PRELOAD'] = '/system/b2g/libmozglue.so'
-        else:
-            XPCShellRemote.setLD_LIBRARY_PATH(self, env)
-
-    # Overridden
     def launchProcess(self, cmd, stdout, stderr, env, cwd):
         try:
             # This returns 1 even when tests pass - hardcode returncode to 0 (bug 773703)
             outputFile = RemoteXPCShellTestThread.launchProcess(self, cmd, stdout, stderr, env, cwd)
             self.shellReturnCode = 0
         except DMError:
             self.shellReturnCode = -1
             outputFile = "xpcshelloutput"
             f = open(outputFile, "a")
             f.write("\n%s" % traceback.format_exc())
             f.close()
         return outputFile
 
 class B2GXPCShellRemote(XPCShellRemote):
     # Overridden
+    def setLD_LIBRARY_PATH(self):
+        self.env['LD_LIBRARY_PATH'] = '/system/b2g'
+        if not self.options.use_device_libs:
+            # overwrite /system/b2g if necessary
+            XPCShellRemote.setLD_LIBRARY_PATH(self)
+
+    # Overridden
     def setupUtilities(self):
         if self.options.clean:
             # Ensure a fresh directory structure for our tests
             self.clean()
             self.device.mkDir(self.options.remoteTestRoot)
 
         XPCShellRemote.setupUtilities(self)
 
@@ -64,17 +63,21 @@ class B2GXPCShellRemote(XPCShellRemote):
                 rel_path = os.path.relpath(os.path.join(root, filename), self.xpcDir)
                 test_file = os.path.join(self.remoteScriptsDir, rel_path)
                 print 'pushing %s' % test_file
                 self.device.pushFile(os.path.join(root, filename), test_file, retryLimit=10)
 
     # Overridden
     def pushLibs(self):
         if not self.options.use_device_libs:
-            XPCShellRemote.pushLibs(self)
+            count = XPCShellRemote.pushLibs(self)
+            if not count:
+                # couldn't find any libs, fallback to device libs
+                self.env['LD_LIBRARY_PATH'] = '/system/b2g'
+                self.options.use_device_libs = True
 
 class B2GOptions(RemoteXPCShellOptions):
 
     def __init__(self):
         RemoteXPCShellOptions.__init__(self)
         defaults = {}
 
         self.add_option('--b2gpath', action='store',
