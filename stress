# HG changeset patch
# Parent aada0f74faf9af9a5bc0f54d270020c2d7668969
# User Mihnea Dobrescu-Balaur <mihneadb@gmail.com>

diff --git a/testing/xpcshell/mach_commands.py b/testing/xpcshell/mach_commands.py
--- a/testing/xpcshell/mach_commands.py
+++ b/testing/xpcshell/mach_commands.py
@@ -91,16 +91,17 @@ class XPCShellRunner(MozbuildObject):
         return self._run_xpcshell_harness(**args)
 
     def _run_xpcshell_harness(self, test_dirs=None, manifest=None,
         test_path=None, debug=False, shuffle=False, interactive=False,
         keep_going=False, sequential=False):
 
         # Obtain a reference to the xpcshell test runner.
         import runxpcshelltests
+        from runxpcshelltests import stress_failures
 
         dummy_log = StringIO()
         xpcshell = runxpcshelltests.XPCShellTests(log=dummy_log)
         self.log_manager.enable_unstructured()
 
         tests_dir = os.path.join(self.topobjdir, '_tests', 'xpcshell')
         modules_dir = os.path.join(self.topobjdir, '_tests', 'modules')
 
@@ -142,17 +143,27 @@ class XPCShellRunner(MozbuildObject):
             if isinstance(v, unicode_type):
                 v = v.encode('utf-8')
 
             if isinstance(k, unicode_type):
                 k = k.encode('utf-8')
 
             filtered_args[k] = v
 
-        result = xpcshell.runTests(**filtered_args)
+        for i in range(10):
+            print "---- STARTING RUN ----"
+            result = xpcshell.runTests(**filtered_args)
+
+        import json
+        import tempfile
+        tempf = tempfile.mkstemp()
+        with open(tempf[1], 'w') as f:
+            json.dump(stress_failures, f)
+
+        print "JSON IN", tempf[1]
 
         self.log_manager.disable_unstructured()
 
         if not result and not sequential:
             print("Tests were run in parallel. Try running with --sequential \
                    to make sure the failures were not caused by this.")
         return int(not result)
 
diff --git a/testing/xpcshell/runxpcshelltests.py b/testing/xpcshell/runxpcshelltests.py
--- a/testing/xpcshell/runxpcshelltests.py
+++ b/testing/xpcshell/runxpcshelltests.py
@@ -33,17 +33,21 @@ from automationutils import *
 # in buffered output interleaved with other threads' output.
 # To prevent his, each call to the logger as well as any blocks of output that
 # are intended to be continuous are protected by the same lock.
 LOG_MUTEX = RLock()
 
 HARNESS_TIMEOUT = 5 * 60
 
 # benchmarking on tbpl revealed that this works best for now
-NUM_THREADS = int(cpu_count() * 4)
+NUM_THREADS = 100
+
+stress_failures = []
+def removeNonAscii(s):
+    return "".join(i for i in s if ord(i) < 128)
 
 # --------------------------------------------------------------
 # TODO: this is a hack for mozbase without virtualenv, remove with bug 849900
 #
 here = os.path.dirname(__file__)
 mozbase = os.path.realpath(os.path.join(os.path.dirname(here), 'mozbase'))
 
 if os.path.isdir(mozbase):
@@ -186,16 +190,18 @@ class XPCShellTestThread(Thread):
         # Show only those environment variables that are changed from
         # the ambient environment.
         changedEnv = (set("%s=%s" % i for i in self.env.iteritems())
                       - set("%s=%s" % i for i in os.environ.iteritems()))
         self.log.info("TEST-INFO | %s | environment: %s" % (name, list(changedEnv)))
 
     def testTimeout(self, test_file, processPID):
         self.log.error("TEST-UNEXPECTED-FAIL | %s | Test timed out" % test_file)
+        data = {'file': test_file, 'type': 'timeout'}
+        stress_failures.append(data)
         Automation().killAndGetStackNoScreenshot(processPID, self.appPath, self.debuggerInfo)
 
     def buildCmdTestFile(self, name):
         """
           Build the command line arguments for the test file.
           On a remote system, this may be overloaded to use a remote path structure.
         """
         return ['-e', 'const _TEST_FILE = ["%s"];' %
@@ -478,16 +484,18 @@ class XPCShellTestThread(Thread):
                                                 stdout, re.MULTILINE)
                                   and not re.search("^child: CHILD-TEST-COMPLETED",
                                                     stdout, re.MULTILINE)))
 
             if result != expected:
                 failureType = "TEST-UNEXPECTED-%s" % ("FAIL" if expected else "PASS")
                 message = "%s | %s | test failed (with xpcshell return code: %d), see following log:" % (
                               failureType, name, self.getReturnCode(proc))
+                data = {'file': name, 'type': 'fail', 'message': removeNonAscii(message), 'stdout': stdout}
+                stress_failures.append(data)
 
                 with LOG_MUTEX:
                     self.log.error(message)
                     self.print_stdout(stdout)
 
                 self.failCount += 1
                 self.xunit_result["passed"] = False
 
@@ -1375,13 +1383,10 @@ def main():
     if options.interactive and not options.testPath:
         print >>sys.stderr, "Error: You must specify a test filename in interactive mode!"
         sys.exit(1)
 
     # running sequentially for safety reasons for now (in automation)
     # mach will run tests in parallel by default
     options.sequential = True
 
-    if not xpcsh.runTests(args[0], testdirs=args[1:], **options.__dict__):
-        sys.exit(1)
-
 if __name__ == '__main__':
     main()
