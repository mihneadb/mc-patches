# HG changeset patch
# Parent d5fc994ca2ed8a7be9627e9b0198b867105fcd1f
# User Mihnea Dobrescu-Balaur <mihneadb@gmail.com>
Bug 915865 - Use mozrunner instead of automation.py in the reftest harness

diff --git a/layout/tools/reftest/remotereftest.py b/layout/tools/reftest/remotereftest.py
--- a/layout/tools/reftest/remotereftest.py
+++ b/layout/tools/reftest/remotereftest.py
@@ -397,16 +397,30 @@ class RemoteReftest(RefTest):
             if printLogcat:
                 logcat = self._devicemanager.getLogcat(filterOutRegexps=fennecLogcatFilters)
                 print ''.join(logcat)
             print "Device info: %s" % self._devicemanager.getInfo()
             print "Test root: %s" % self._devicemanager.getDeviceRoot()
         except devicemanager.DMError:
             print "WARNING: Error getting device information"
 
+    def runApp(self, profile, binary, cmdargs, env,
+               timeout=None, debuggerInfo=None,
+               symbolsPath=None, options=None):
+        status = self.automation.runApp(None, env,
+                                        binary,
+                                        profile.profile,
+                                        cmdargs,
+                                        utilityPath=options.utilityPath,
+                                        xrePath=options.xrePath,
+                                        debuggerInfo=debuggerInfo,
+                                        symbolsPath=symbolsPath,
+                                        timeout=timeout)
+        return status
+
     def cleanup(self, profileDir):
         # Pull results back from device
         if self.remoteLogFile and \
                 self._devicemanager.fileExists(self.remoteLogFile):
             self._devicemanager.getFile(self.remoteLogFile, self.localLogName)
         else:
             print "WARNING: Unable to retrieve log file (%s) from remote " \
                 "device" % self.remoteLogFile
diff --git a/layout/tools/reftest/runreftest.py b/layout/tools/reftest/runreftest.py
--- a/layout/tools/reftest/runreftest.py
+++ b/layout/tools/reftest/runreftest.py
@@ -2,25 +2,29 @@
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
 """
 Runs the reftest test harness.
 """
 
 import re, sys, shutil, os, os.path
+import subprocess
+
 SCRIPT_DIRECTORY = os.path.abspath(os.path.realpath(os.path.dirname(sys.argv[0])))
 sys.path.insert(0, SCRIPT_DIRECTORY)
 
 from automation import Automation
 from automationutils import *
 from optparse import OptionParser
 from tempfile import mkdtemp
 
+import mozcrash
 import mozprofile
+from mozrunner import FirefoxRunner
 
 class RefTest(object):
 
   oldcwd = os.getcwd()
 
   def __init__(self, automation):
     self.automation = automation
 
@@ -123,41 +127,55 @@ class RefTest(object):
     self.leakLogFile = os.path.join(profileDir, "runreftest_leaks.log")
     browserEnv["XPCOM_MEM_BLOAT_LOG"] = self.leakLogFile
     return browserEnv
 
   def cleanup(self, profileDir):
     if profileDir:
       shutil.rmtree(profileDir, True)
 
+  def runApp(self, profile, binary, cmdargs, env,
+             timeout=None, debuggerInfo=None,
+             symbolsPath=None, options=None):
+    kp_kwargs = {
+        'stdin': subprocess.PIPE,
+        'stderr': subprocess.PIPE,
+    }
+    runner = FirefoxRunner(profile=profile, binary=binary,
+                         cmdargs=cmdargs, env=env, kp_kwargs=kp_kwargs)
+    runner.start(timeout=timeout)
+    # TODO debugger stuff
+    status = runner.wait()
+    mozcrash.check_for_crashes(os.path.join(profile.profile, "minidumps"),
+                               symbolsPath,
+                               test_name=self.automation.lastTestSeen)
+    runner.cleanup()
+    return status
+
   def runTests(self, testPath, options, cmdlineArgs = None):
     debuggerInfo = getDebuggerInfo(self.oldcwd, options.debugger, options.debuggerArgs,
         options.debuggerInteractive);
 
     profileDir = None
     try:
       reftestlist = self.getManifestPath(testPath)
       if cmdlineArgs == None:
         cmdlineArgs = ['-reftest', reftestlist]
       profile = self.createReftestProfile(options, reftestlist)
       profileDir = profile.profile # name makes more sense
 
       # browser environment
       browserEnv = self.buildBrowserEnv(options, profileDir)
 
       self.automation.log.info("REFTEST INFO | runreftest.py | Running tests: start.\n")
-      status = self.automation.runApp(None, browserEnv, options.app, profileDir,
-                                 cmdlineArgs,
-                                 utilityPath = options.utilityPath,
-                                 xrePath=options.xrePath,
-                                 debuggerInfo=debuggerInfo,
-                                 symbolsPath=options.symbolsPath,
-                                 # give the JS harness 30 seconds to deal
-                                 # with its own timeouts
-                                 timeout=options.timeout + 30.0)
+      status = self.runApp(profile, binary=options.app, cmdargs=cmdlineArgs,
+                  # give the JS harness 30 seconds to deal with its own timeouts
+                  env=browserEnv, timeout=options.timeout + 30.0,
+                  symbolsPath=options.symbolsPath,
+                  options=options, debuggerInfo=debuggerInfo)
       processLeakLog(self.leakLogFile, options.leakThreshold)
       self.automation.log.info("\nREFTEST INFO | runreftest.py | Running tests: end.")
     finally:
       self.cleanup(profileDir)
     return status
 
   def copyExtraFilesToProfile(self, options, profile):
     "Copy extra files or dirs specified on the command line to the testing profile."
