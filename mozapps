# HG changeset patch
# Parent be19c5633976ff0f7a6dd19fc2570c4abc24ddac

diff --git a/toolkit/mozapps/extensions/test/xpcshell/test_AddonRepository_cache.js b/toolkit/mozapps/extensions/test/xpcshell/test_AddonRepository_cache.js
--- a/toolkit/mozapps/extensions/test/xpcshell/test_AddonRepository_cache.js
+++ b/toolkit/mozapps/extensions/test/xpcshell/test_AddonRepository_cache.js
@@ -2,19 +2,21 @@
  * http://creativecommons.org/publicdomain/zero/1.0/
  */
 
 // Tests caching in AddonRepository.jsm
 
 Components.utils.import("resource://gre/modules/AddonRepository.jsm");
 
 Components.utils.import("resource://testing-common/httpd.js");
-let gServer;
 
-const PORT      = 4444;
+let gServer = new HttpServer();
+gServer.start(-1);
+
+const PORT      = gServer.identity.primaryPort;
 const BASE_URL  = "http://localhost:" + PORT;
 
 const PREF_GETADDONS_CACHE_ENABLED = "extensions.getAddons.cache.enabled";
 const PREF_GETADDONS_CACHE_TYPES   = "extensions.getAddons.cache.types";
 const PREF_GETADDONS_BYIDS         = "extensions.getAddons.get.url";
 const PREF_GETADDONS_BYIDS_PERF    = "extensions.getAddons.getWithPerformance.url";
 const GETADDONS_RESULTS            = BASE_URL + "/data/test_AddonRepository_cache.xml";
 const GETADDONS_EMPTY              = BASE_URL + "/data/test_AddonRepository_empty.xml";
@@ -528,19 +530,18 @@ function run_test() {
   createAppInfo("xpcshell@tests.mozilla.org", "XPCShell", "1", "1.9");
 
   startupManager();
 
   // Install XPI add-ons
   installAllFiles(ADDON_FILES, function() {
     restartManager();
 
-    gServer = new HttpServer();
     gServer.registerDirectory("/data/", do_get_file("data"));
-    gServer.start(PORT);
+    //gServer.start(PORT);
 
     run_test_1();
   });
 }
 
 function end_test() {
   gServer.stop(do_test_finished);
 }
diff --git a/toolkit/mozapps/extensions/test/xpcshell/test_updatecheck.js b/toolkit/mozapps/extensions/test/xpcshell/test_updatecheck.js
--- a/toolkit/mozapps/extensions/test/xpcshell/test_updatecheck.js
+++ b/toolkit/mozapps/extensions/test/xpcshell/test_updatecheck.js
@@ -2,38 +2,38 @@
  * http://creativecommons.org/publicdomain/zero/1.0/
  */
 
 // This verifies that AddonUpdateChecker works correctly
 
 Components.utils.import("resource://gre/modules/AddonUpdateChecker.jsm");
 
 Components.utils.import("resource://testing-common/httpd.js");
-var testserver;
+var testserver = new HttpServer();
+testserver.start(-1);
+var port = testserver.identity.primaryPort;
 
 function run_test() {
   createAppInfo("xpcshell@tests.mozilla.org", "XPCShell", "1", "1.9.2");
 
   // Create and configure the HTTP server.
-  testserver = new HttpServer();
   testserver.registerDirectory("/data/", do_get_file("data"));
-  testserver.start(4444);
 
   do_test_pending();
   run_test_1();
 }
 
 function end_test() {
   testserver.stop(do_test_finished);
 }
 
 // Test that a basic update check returns the expected available updates
 function run_test_1() {
   AddonUpdateChecker.checkForUpdates("updatecheck1@tests.mozilla.org", null,
-                                     "http://localhost:4444/data/test_updatecheck.rdf", {
+                                     "http://localhost:" + port + "/data/test_updatecheck.rdf", {
     onUpdateCheckComplete: function(updates) {
       check_test_1(updates);
     },
 
     onUpdateCheckError: function(status) {
       do_throw("Update check failed with status " + status);
     }
   });
@@ -71,175 +71,175 @@ function check_test_1(updates) {
 let updateKey = "MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDK426erD/H3XtsjvaB5+PJqbhj" +
                 "Zc9EDI5OCJS8R3FIObJ9ZHJK1TXeaE7JWqt9WUmBWTEFvwS+FI9vWu8058N9CHhD" +
                 "NyeP6i4LuUYjTURnn7Yw/IgzyIJ2oKsYa32RuxAyteqAWqPT/J63wBixIeCxmysf" +
                 "awB/zH4KaPiY3vnrzQIDAQAB";
 
 function run_test_2() {
   AddonUpdateChecker.checkForUpdates("test_bug378216_5@tests.mozilla.org",
                                      updateKey,
-                                     "http://localhost:4444/data/test_updatecheck.rdf", {
+                                     "http://localhost:" + port + "/data/test_updatecheck.rdf", {
     onUpdateCheckComplete: function(updates) {
       do_throw("Expected the update check to fail");
     },
 
     onUpdateCheckError: function(status) {
       run_test_3();
     }
   });
 }
 
 function run_test_3() {
   AddonUpdateChecker.checkForUpdates("test_bug378216_7@tests.mozilla.org",
                                      updateKey,
-                                     "http://localhost:4444/data/test_updatecheck.rdf", {
+                                     "http://localhost:" + port + "/data/test_updatecheck.rdf", {
     onUpdateCheckComplete: function(updates) {
       do_throw("Expected the update check to fail");
     },
 
     onUpdateCheckError: function(status) {
       run_test_4();
     }
   });
 }
 
 function run_test_4() {
   AddonUpdateChecker.checkForUpdates("test_bug378216_8@tests.mozilla.org",
                                      updateKey,
-                                     "http://localhost:4444/data/test_updatecheck.rdf", {
+                                     "http://localhost:" + port + "/data/test_updatecheck.rdf", {
     onUpdateCheckComplete: function(updates) {
       do_check_eq(updates.length, 1);
       do_check_false("updateURL" in updates[0]);
       run_test_5();
     },
 
     onUpdateCheckError: function(status) {
       do_throw("Update check failed with status " + status);
     }
   });
 }
 
 function run_test_5() {
   AddonUpdateChecker.checkForUpdates("test_bug378216_9@tests.mozilla.org",
                                      updateKey,
-                                     "http://localhost:4444/data/test_updatecheck.rdf", {
+                                     "http://localhost:" + port + "/data/test_updatecheck.rdf", {
     onUpdateCheckComplete: function(updates) {
       do_check_eq(updates.length, 1);
       do_check_eq(updates[0].version, "2.0");
       do_check_true("updateURL" in updates[0]);
       run_test_6();
     },
 
     onUpdateCheckError: function(status) {
       do_throw("Update check failed with status " + status);
     }
   });
 }
 
 function run_test_6() {
   AddonUpdateChecker.checkForUpdates("test_bug378216_10@tests.mozilla.org",
                                      updateKey,
-                                     "http://localhost:4444/data/test_updatecheck.rdf", {
+                                     "http://localhost:" + port + "/data/test_updatecheck.rdf", {
     onUpdateCheckComplete: function(updates) {
       do_check_eq(updates.length, 1);
       do_check_eq(updates[0].version, "2.0");
       do_check_true("updateURL" in updates[0]);
       run_test_7();
     },
 
     onUpdateCheckError: function(status) {
       do_throw("Update check failed with status " + status);
     }
   });
 }
 
 function run_test_7() {
   AddonUpdateChecker.checkForUpdates("test_bug378216_11@tests.mozilla.org",
                                      updateKey,
-                                     "http://localhost:4444/data/test_updatecheck.rdf", {
+                                     "http://localhost:" + port + "/data/test_updatecheck.rdf", {
     onUpdateCheckComplete: function(updates) {
       do_check_eq(updates.length, 1);
       do_check_eq(updates[0].version, "2.0");
       do_check_true("updateURL" in updates[0]);
       run_test_8();
     },
 
     onUpdateCheckError: function(status) {
       do_throw("Update check failed with status " + status);
     }
   });
 }
 
 function run_test_8() {
   AddonUpdateChecker.checkForUpdates("test_bug378216_12@tests.mozilla.org",
                                      updateKey,
-                                     "http://localhost:4444/data/test_updatecheck.rdf", {
+                                     "http://localhost:" + port + "/data/test_updatecheck.rdf", {
     onUpdateCheckComplete: function(updates) {
       do_check_eq(updates.length, 1);
       do_check_false("updateURL" in updates[0]);
       run_test_9();
     },
 
     onUpdateCheckError: function(status) {
       do_throw("Update check failed with status " + status);
     }
   });
 }
 
 function run_test_9() {
   AddonUpdateChecker.checkForUpdates("test_bug378216_13@tests.mozilla.org",
                                      updateKey,
-                                     "http://localhost:4444/data/test_updatecheck.rdf", {
+                                     "http://localhost:" + port + "/data/test_updatecheck.rdf", {
     onUpdateCheckComplete: function(updates) {
       do_check_eq(updates.length, 1);
       do_check_eq(updates[0].version, "2.0");
       do_check_true("updateURL" in updates[0]);
       run_test_10();
     },
 
     onUpdateCheckError: function(status) {
       do_throw("Update check failed with status " + status);
     }
   });
 }
 
 function run_test_10() {
   AddonUpdateChecker.checkForUpdates("test_bug378216_14@tests.mozilla.org",
                                      null,
-                                     "http://localhost:4444/data/test_updatecheck.rdf", {
+                                     "http://localhost:" + port + "/data/test_updatecheck.rdf", {
     onUpdateCheckComplete: function(updates) {
       do_check_eq(updates.length, 0);
       run_test_11();
     },
 
     onUpdateCheckError: function(status) {
       do_throw("Update check failed with status " + status);
     }
   });
 }
 
 function run_test_11() {
   AddonUpdateChecker.checkForUpdates("test_bug378216_15@tests.mozilla.org",
                                      null,
-                                     "http://localhost:4444/data/test_updatecheck.rdf", {
+                                     "http://localhost:" + port + "/data/test_updatecheck.rdf", {
     onUpdateCheckComplete: function(updates) {
       do_throw("Update check should have failed");
     },
 
     onUpdateCheckError: function(status) {
       do_check_eq(status, AddonUpdateChecker.ERROR_PARSE_ERROR);
       run_test_12();
     }
   });
 }
 
 function run_test_12() {
   AddonUpdateChecker.checkForUpdates("ignore-compat@tests.mozilla.org",
                                      null,
-                                     "http://localhost:4444/data/test_updatecheck.rdf", {
+                                     "http://localhost:" + port +"/data/test_updatecheck.rdf", {
     onUpdateCheckComplete: function(updates) {
       do_check_eq(updates.length, 3);
       let update = AddonUpdateChecker.getNewestCompatibleUpdate(updates,
                                                                 null,
                                                                 null,
                                                                 true);
       do_check_neq(update, null);
       do_check_eq(update.version, 2);
@@ -250,17 +250,17 @@ function run_test_12() {
       do_throw("Update check failed with status " + status);
     }
   });
 }
 
 function run_test_13() {
   AddonUpdateChecker.checkForUpdates("compat-override@tests.mozilla.org",
                                      null,
-                                     "http://localhost:4444/data/test_updatecheck.rdf", {
+                                     "http://localhost:" + port + "/data/test_updatecheck.rdf", {
     onUpdateCheckComplete: function(updates) {
       do_check_eq(updates.length, 3);
       let overrides = [{
         type: "incompatible",
         minVersion: 1,
         maxVersion: 2,
         appID: "xpcshell@tests.mozilla.org",
         appMinVersion: 0.1,
@@ -288,17 +288,17 @@ function run_test_13() {
       do_throw("Update check failed with status " + status);
     }
   });
 }
 
 function run_test_14() {
   AddonUpdateChecker.checkForUpdates("compat-strict-optin@tests.mozilla.org",
                                      null,
-                                     "http://localhost:4444/data/test_updatecheck.rdf", {
+                                     "http://localhost:" + port + "/data/test_updatecheck.rdf", {
     onUpdateCheckComplete: function(updates) {
       do_check_eq(updates.length, 1);
       let update = AddonUpdateChecker.getNewestCompatibleUpdate(updates,
                                                                 null,
                                                                 null,
                                                                 true,
                                                                 false);
       do_check_eq(update, null);
diff --git a/toolkit/mozapps/update/test/unit/head_update.js.in b/toolkit/mozapps/update/test/unit/head_update.js.in
--- a/toolkit/mozapps/update/test/unit/head_update.js.in
+++ b/toolkit/mozapps/update/test/unit/head_update.js.in
@@ -59,17 +59,20 @@ const IS_TOOLKIT_GONK = false;
 const USE_EXECV = IS_UNIX && !IS_MACOSX;
 
 #ifdef MOZ_VERIFY_MAR_SIGNATURE
 const IS_MAR_CHECKS_ENABLED = true;
 #else
 const IS_MAR_CHECKS_ENABLED = false;
 #endif
 
-const URL_HOST = "http://localhost:4444/";
+XPCOMUtils.defineLazyGetter(this, "URL_HOST", function() {
+  return "http://localhost:" + gTestserver.identity.primaryPort + "/";
+});
+
 const URL_PATH = "data";
 
 const APPLY_TO_DIR_SUFFIX = "_applyToDir/";
 #ifdef XP_MACOSX
 const UPDATED_DIR_SUFFIX = "Updated.app/";
 #else
 const UPDATED_DIR_SUFFIX = "updated/";
 #endif
@@ -1855,17 +1858,18 @@ function start_httpserver(aRelativeDirNa
 
   if (!dir.isDirectory())
     do_throw("A file instead of a directory was specified for HttpServer " +
              "registerDirectory! path: " + dir.path + "\n");
 
   Components.utils.import("resource://testing-common/httpd.js");
   gTestserver = new HttpServer();
   gTestserver.registerDirectory("/data/", dir);
-  gTestserver.start(4444);
+  gTestserver.start(-1);
+  return gTestserver.identity.primaryPort;
 }
 
 /* Helper for stopping the http server used by the tests */
 function stop_httpserver(callback) {
   do_check_true(!!callback);
   gTestserver.stop(callback);
 }
 
