# HG changeset patch
# Parent 515c9984d3d0b58ded8d40b36760b1e16e9851aa
# User Mihnea Dobrescu-Balaur <mihneadb@gmail.com>

diff --git a/dom/plugins/test/unit/head_plugins.js b/dom/plugins/test/unit/head_plugins.js
--- a/dom/plugins/test/unit/head_plugins.js
+++ b/dom/plugins/test/unit/head_plugins.js
@@ -11,16 +11,17 @@ const gIsOSX = ("nsILocalFileMac" in Ci)
 const gIsLinux = ("@mozilla.org/gnome-gconf-service;1" in Cc) ||
   ("@mozilla.org/gio-service;1" in Cc);
 
 // Finds the test plugin library
 function get_test_plugin() {
   var pluginEnum = gDirSvc.get("APluginsDL", Ci.nsISimpleEnumerator);
   while (pluginEnum.hasMoreElements()) {
     let dir = pluginEnum.getNext().QueryInterface(Ci.nsILocalFile);
+    dump("~~~~~ FILE : " + dir.path + "\n");
     let plugin = dir.clone();
     // OSX plugin
     plugin.append("Test.plugin");
     if (plugin.exists()) {
       plugin.normalize();
       return plugin;
     }
     plugin = dir.clone();
@@ -111,13 +112,15 @@ function get_test_plugin_no_symlink() {
   let pluginEnum = dirSvc.get("APluginsDL", Ci.nsISimpleEnumerator);
   while (pluginEnum.hasMoreElements()) {
     let dir = pluginEnum.getNext().QueryInterface(Ci.nsILocalFile);
     if (dir.path.contains("plugins"))
       continue;
     let plugin = dir.clone();
     plugin.append(get_platform_specific_plugin_name());
     if (plugin.exists()) {
+      dump("~!~!~!~ " + plugin.path + "\n");
       return plugin;
     }
   }
+  do_throw("RETURNING NULL");
   return null;
 }
diff --git a/dom/plugins/test/unit/test_persist_in_prefs.js b/dom/plugins/test/unit/test_persist_in_prefs.js
--- a/dom/plugins/test/unit/test_persist_in_prefs.js
+++ b/dom/plugins/test/unit/test_persist_in_prefs.js
@@ -83,17 +83,19 @@ function run_test() {
   // check that the expected plugin state was loaded correctly from the registry
   do_check_true(plugin.disabled);
   do_check_false(plugin.clicktoplay);
   // ... and imported into prefs, with 0 being the disabled state
   do_check_eq(0, Services.prefs.getIntPref(statePref));
 
   // prepare a copy of the plugin and backup the original
   file.copyTo(null, "nptestcopy" + suffix);
+  dump("~~~~~~~~~~~ " + file.path + "\n");
   let copy = pluginDir.clone();
+  dump("~~~~~~~~~~~ " + copy.path + "\n");
   copy.append("nptestcopy" + suffix);
   file.moveTo(tempDir, null);
 
   // test that the settings persist through a few variations of test-plugin names
   let testNames = [
     pluginName + "2",
     pluginName.toUpperCase() + "_11_5_42_2323",
     pluginName + "-5.2.7"
diff --git a/testing/xpcshell/runxpcshelltests.py b/testing/xpcshell/runxpcshelltests.py
--- a/testing/xpcshell/runxpcshelltests.py
+++ b/testing/xpcshell/runxpcshelltests.py
@@ -219,16 +219,17 @@ class XPCShellTestThread(Thread):
         tempDir = mkdtemp()
         self.env["XPCSHELL_TEST_TEMP_DIR"] = tempDir
         if self.interactive:
             self.log.info("TEST-INFO | temp dir is %s" % tempDir)
         return tempDir
 
     def setupPluginsDir(self):
         pluginsDir = mkdtemp()
+        print "!!!!!!!!!!!!!!! PLUGINS DIR!", pluginsDir
         # shutil.copytree requires dst to not exist. Deleting the tempdir
         # would make a race condition possible in a concurrent environment,
         # so we are using dir_utils.copy_tree which accepts an existing dst
         dir_util.copy_tree(self.pluginsPath, pluginsDir)
         if self.interactive:
             self.log.info("TEST-INFO | plugins dir is %s" % pluginsDir)
         return pluginsDir
 
